use std::collections::HashMap;

use serde::{Deserialize, Serialize};
use serde_json::Value;

/// JSON schema for exceptions based on RFC 7807
#[serde_with::skip_serializing_none]
#[derive(Serialize, Deserialize, Default, Debug, PartialEq, Clone)]
pub struct Exception {
    /// A URI reference that identifies the problem type.
    pub r#type: String,
    /// A short, human-readable summary of the problem type.
    pub title: Option<String>,
    /// The HTTP status code generated by the origin server for this occurrence
    /// of the problem.
    pub status: Option<u16>,
    /// A human-readable explanation specific to this occurrence of the problem.
    pub detail: Option<String>,
    /// A URI reference that identifies the specific occurrence of the problem.
    /// It may or may not yield further information if dereferenced.
    pub instance: Option<String>,
    #[serde(flatten)]
    pub additional_properties: Option<HashMap<String, Value>>,
}

impl Exception {
    pub fn new(status_code: u16) -> Self {
        Exception {
            r#type: format!(
                "https://httpwg.org/specs/rfc7231.html#status.{}",
                status_code
            ),
            status: Some(status_code),
            ..Default::default()
        }
    }

    pub fn title(mut self, title: impl ToString) -> Self {
        self.title = Some(title.to_string());
        self
    }

    pub fn detail(mut self, detail: impl ToString) -> Self {
        self.detail = Some(detail.to_string());
        self
    }

    pub fn instance(mut self, instance: impl ToString) -> Self {
        self.instance = Some(instance.to_string());
        self
    }
}
