use std::collections::HashMap;

use serde::{Deserialize, Serialize};
use serde_json::Value;

/// JSON schema for exceptions based on RFC 7807
#[derive(Serialize, Deserialize, Debug, Default)]
pub struct Exception {
    /// A URI reference that identifies the problem type.
    pub r#type: String,
    /// A short, human-readable summary of the problem type.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The HTTP status code generated by the origin server for this occurrence
    /// of the problem.
    pub status: Option<isize>,
    /// A human-readable explanation specific to this occurrence of the problem.
    pub detail: Option<String>,
    /// A URI reference that identifies the specific occurrence of the problem.
    /// It may or may not yield further information if dereferenced.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none", flatten)]
    pub additional_properties: Option<HashMap<String, Value>>,
}
